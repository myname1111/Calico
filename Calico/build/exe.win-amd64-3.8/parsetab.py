
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftNEWLINEnonecalcnoneoutputnonewhilenonecalltuplenoneelifELSEnoneifnonassocLESSMORELEEQMOEQleftPLUSMINUSleftMULTIPLYDIVIDEleftPARPALrightUMINUSCOMMA COMMENT DEQUALS DIVIDE DSLASH ELIF ELSE EQUALS FALSE FLOAT IF INT LBRAC LEEQ LESS METHOD MINUS MOEQ MORE MULTIPLY NAME NEWLINE OUTPUT PAL PAR PLUS RBRAC STRING TRUE WHILE\n    calc : calc NEWLINE calc\n    \n    call : NAME tuple\n    \n    calc : if\n         | expression\n         | var_assign\n         | data\n         | empty\n         | while\n         | method\n         | output\n         | comment\n    \n    if : IF RBRAC calc LBRAC RBRAC calc LBRAC elif\n    \n    var_assign : NAME EQUALS expression\n               | NAME EQUALS data\n    \n    if : IF RBRAC calc LBRAC RBRAC calc LBRAC\n    expression : MINUS expression %prec UMINUS\n    expression : expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression PLUS expression\n               | expression MINUS expression\n               | expression MORE expression\n               | expression LESS expression\n               | expression MOEQ expression\n               | expression LEEQ expression\n               | expression DEQUALS expression\n    \n    expression : INT\n               | FLOAT\n               | call\n               | TRUE\n               | FALSE\n    \n    expression : PAL expression PAR\n    \n    expression : NAME\n    \n    data : data COMMA data\n    \n    data : string\n         | INT\n         | FLOAT\n         | tuple\n         | expression\n         | empty\n    \n    string : STRING\n    \n    tuple : PAL data PAR\n    \n    while : WHILE RBRAC expression LBRAC RBRAC calc LBRAC\n    \n    output : OUTPUT expression\n    \n    method : METHOD NAME tuple RBRAC calc LBRAC\n    \n    elif : ELIF RBRAC calc LBRAC RBRAC calc LBRAC\n    \n    elif : ELIF RBRAC calc LBRAC RBRAC calc LBRAC elif\n    \n    empty : none\n          | comment\n    \n    none :\n    \n    comment : COMMENT\n    '
    
_lr_action_items = {'IF':([0,28,39,81,82,83,92,95,],[11,11,11,11,11,11,11,11,]),'MINUS':([0,3,12,13,14,15,16,17,18,19,25,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,50,51,52,54,56,57,58,59,60,61,62,63,64,66,67,68,69,71,72,73,74,76,78,81,82,83,92,95,],[12,32,12,-26,-27,-28,-29,-30,12,-32,12,12,12,12,12,12,12,12,12,12,12,12,12,-16,-26,-27,12,-32,32,12,-2,12,12,32,-17,-18,-19,-20,32,32,32,32,32,-26,-27,32,12,32,-31,-41,32,32,32,12,12,12,12,12,]),'INT':([0,12,18,25,28,29,30,31,32,33,34,35,36,37,38,39,43,49,51,52,69,81,82,83,92,95,],[13,41,13,41,13,41,41,41,41,41,41,41,41,41,66,13,41,13,66,41,66,13,13,13,13,13,]),'FLOAT':([0,12,18,25,28,29,30,31,32,33,34,35,36,37,38,39,43,49,51,52,69,81,82,83,92,95,],[14,42,14,42,14,42,42,42,42,42,42,42,42,42,67,14,42,14,67,42,67,14,14,14,14,14,]),'TRUE':([0,12,18,25,28,29,30,31,32,33,34,35,36,37,38,39,43,49,51,52,69,81,82,83,92,95,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'FALSE':([0,12,18,25,28,29,30,31,32,33,34,35,36,37,38,39,43,49,51,52,69,81,82,83,92,95,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'PAL':([0,12,18,19,25,28,29,30,31,32,33,34,35,36,37,38,39,43,44,49,51,52,53,69,81,82,83,92,95,],[18,43,18,51,43,18,43,43,43,43,43,43,43,43,43,69,18,43,51,18,69,43,51,18,18,18,18,18,18,]),'NAME':([0,12,18,24,25,28,29,30,31,32,33,34,35,36,37,38,39,43,49,51,52,69,81,82,83,92,95,],[19,44,44,53,44,19,44,44,44,44,44,44,44,44,44,44,19,44,44,44,44,44,19,19,19,19,19,]),'WHILE':([0,28,39,81,82,83,92,95,],[23,23,23,23,23,23,23,23,]),'METHOD':([0,28,39,81,82,83,92,95,],[24,24,24,24,24,24,24,24,]),'OUTPUT':([0,28,39,81,82,83,92,95,],[25,25,25,25,25,25,25,25,]),'COMMENT':([0,18,28,38,39,49,51,69,81,82,83,92,95,],[26,26,26,26,26,26,26,26,26,26,26,26,26,]),'STRING':([0,18,28,38,39,49,51,69,81,82,83,92,95,],[27,27,27,27,27,27,27,27,27,27,27,27,27,]),'NEWLINE':([0,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,19,20,21,22,26,27,28,38,39,40,41,42,44,47,48,49,50,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,73,74,75,81,82,83,84,85,86,87,88,89,90,92,93,95,96,97,98,],[-49,28,-3,-4,-5,-6,-7,-8,-9,-10,-11,-26,-27,-28,-29,-30,-32,-34,-37,-47,-50,-40,-49,-49,-49,-16,-26,-27,-32,-39,-48,-49,-2,-43,-1,-17,-18,-19,-20,-21,-22,-23,-24,-25,-33,-26,-27,-38,28,-31,-41,-13,-14,-49,-49,-49,28,28,28,-44,-15,-42,-12,-49,28,-49,28,-45,-46,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,19,20,21,22,26,27,28,38,40,41,42,44,47,48,49,50,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,74,75,87,88,89,90,97,98,],[-49,0,-3,-4,-5,-6,-7,-8,-9,-10,-11,-26,-27,-28,-29,-30,-32,-34,-37,-47,-50,-40,-49,-49,-16,-26,-27,-32,-39,-48,-49,-2,-43,-1,-17,-18,-19,-20,-21,-22,-23,-24,-25,-33,-26,-27,-38,-31,-41,-13,-14,-44,-15,-42,-12,-45,-46,]),'COMMA':([0,3,5,6,10,13,14,15,16,17,18,19,20,21,22,26,27,28,38,39,40,41,42,44,45,46,47,48,49,50,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,78,81,82,83,92,95,],[-49,-38,38,-39,-48,-26,-27,-28,-29,-30,-49,-32,-34,-37,-47,-50,-40,-49,-49,-49,-16,-26,-27,-32,-38,38,-39,-48,-49,-2,-49,-17,-18,-19,-20,-21,-22,-23,-24,-25,38,-26,-27,-38,-49,-31,-41,-38,38,-38,-49,-49,-49,-49,-49,]),'LBRAC':([2,3,4,5,6,7,8,9,10,13,14,15,16,17,19,20,21,22,26,27,28,38,39,40,41,42,44,47,48,49,50,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,73,74,75,76,81,82,83,84,85,86,87,88,89,90,92,93,95,96,97,98,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-26,-27,-28,-29,-30,-32,-34,-37,-47,-50,-40,-49,-49,-49,-16,-26,-27,-32,-39,-48,-49,-2,-43,-1,-17,-18,-19,-20,-21,-22,-23,-24,-25,-33,-26,-27,-38,79,-31,-41,-13,-14,80,-49,-49,-49,87,88,89,-44,-15,-42,-12,-49,94,-49,97,-45,-46,]),'MULTIPLY':([3,13,14,15,16,17,19,40,41,42,44,45,50,54,56,57,58,59,60,61,62,63,64,66,67,68,71,72,73,74,76,78,],[29,-26,-27,-28,-29,-30,-32,-16,-26,-27,-32,29,-2,29,-17,-18,29,29,29,29,29,29,29,-26,-27,29,29,-31,-41,29,29,29,]),'DIVIDE':([3,13,14,15,16,17,19,40,41,42,44,45,50,54,56,57,58,59,60,61,62,63,64,66,67,68,71,72,73,74,76,78,],[30,-26,-27,-28,-29,-30,-32,-16,-26,-27,-32,30,-2,30,-17,-18,30,30,30,30,30,30,30,-26,-27,30,30,-31,-41,30,30,30,]),'PLUS':([3,13,14,15,16,17,19,40,41,42,44,45,50,54,56,57,58,59,60,61,62,63,64,66,67,68,71,72,73,74,76,78,],[31,-26,-27,-28,-29,-30,-32,-16,-26,-27,-32,31,-2,31,-17,-18,-19,-20,31,31,31,31,31,-26,-27,31,31,-31,-41,31,31,31,]),'MORE':([3,13,14,15,16,17,19,40,41,42,44,45,50,54,56,57,58,59,60,61,62,63,64,66,67,68,71,72,73,74,76,78,],[33,-26,-27,-28,-29,-30,-32,-16,-26,-27,-32,33,-2,33,-17,-18,-19,-20,None,None,None,None,33,-26,-27,33,33,-31,-41,33,33,33,]),'LESS':([3,13,14,15,16,17,19,40,41,42,44,45,50,54,56,57,58,59,60,61,62,63,64,66,67,68,71,72,73,74,76,78,],[34,-26,-27,-28,-29,-30,-32,-16,-26,-27,-32,34,-2,34,-17,-18,-19,-20,None,None,None,None,34,-26,-27,34,34,-31,-41,34,34,34,]),'MOEQ':([3,13,14,15,16,17,19,40,41,42,44,45,50,54,56,57,58,59,60,61,62,63,64,66,67,68,71,72,73,74,76,78,],[35,-26,-27,-28,-29,-30,-32,-16,-26,-27,-32,35,-2,35,-17,-18,-19,-20,None,None,None,None,35,-26,-27,35,35,-31,-41,35,35,35,]),'LEEQ':([3,13,14,15,16,17,19,40,41,42,44,45,50,54,56,57,58,59,60,61,62,63,64,66,67,68,71,72,73,74,76,78,],[36,-26,-27,-28,-29,-30,-32,-16,-26,-27,-32,36,-2,36,-17,-18,-19,-20,None,None,None,None,36,-26,-27,36,36,-31,-41,36,36,36,]),'DEQUALS':([3,13,14,15,16,17,19,40,41,42,44,45,50,54,56,57,58,59,60,61,62,63,64,66,67,68,71,72,73,74,76,78,],[37,-26,-27,-28,-29,-30,-32,-16,-26,-27,-32,37,-2,37,-17,-18,-19,-20,-21,-22,-23,-24,37,-26,-27,37,37,-31,-41,37,37,37,]),'RBRAC':([11,23,73,77,79,80,91,94,],[39,52,-41,81,82,83,92,95,]),'PAR':([13,14,15,16,17,18,20,21,22,26,27,38,40,41,42,44,45,46,47,48,50,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,78,],[-26,-27,-28,-29,-30,-49,-34,-37,-47,-50,-40,-49,-16,-26,-27,-32,72,73,-39,-48,-2,-49,-17,-18,-19,-20,-21,-22,-23,-24,-25,-33,-26,-27,-38,-49,72,-31,-41,72,]),'EQUALS':([19,],[49,]),'ELIF':([88,97,],[91,91,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'calc':([0,28,39,81,82,83,92,95,],[1,55,70,84,85,86,93,96,]),'if':([0,28,39,81,82,83,92,95,],[2,2,2,2,2,2,2,2,]),'expression':([0,12,18,25,28,29,30,31,32,33,34,35,36,37,38,39,43,49,51,52,69,81,82,83,92,95,],[3,40,45,54,3,56,57,58,59,60,61,62,63,64,68,3,71,74,68,76,78,3,3,3,3,3,]),'var_assign':([0,28,39,81,82,83,92,95,],[4,4,4,4,4,4,4,4,]),'data':([0,18,28,38,39,49,51,69,81,82,83,92,95,],[5,46,5,65,5,75,46,46,5,5,5,5,5,]),'empty':([0,18,28,38,39,49,51,69,81,82,83,92,95,],[6,47,6,47,6,47,47,47,6,6,6,6,6,]),'while':([0,28,39,81,82,83,92,95,],[7,7,7,7,7,7,7,7,]),'method':([0,28,39,81,82,83,92,95,],[8,8,8,8,8,8,8,8,]),'output':([0,28,39,81,82,83,92,95,],[9,9,9,9,9,9,9,9,]),'comment':([0,18,28,38,39,49,51,69,81,82,83,92,95,],[10,48,10,48,10,48,48,48,10,10,10,10,10,]),'call':([0,12,18,25,28,29,30,31,32,33,34,35,36,37,38,39,43,49,51,52,69,81,82,83,92,95,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'string':([0,18,28,38,39,49,51,69,81,82,83,92,95,],[20,20,20,20,20,20,20,20,20,20,20,20,20,]),'tuple':([0,18,19,28,38,39,44,49,51,53,69,81,82,83,92,95,],[21,21,50,21,21,21,50,21,21,77,21,21,21,21,21,21,]),'none':([0,18,28,38,39,49,51,69,81,82,83,92,95,],[22,22,22,22,22,22,22,22,22,22,22,22,22,]),'elif':([88,97,],[90,98,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> calc","S'",1,None,None,None),
  ('calc -> calc NEWLINE calc','calc',3,'p_line','Calico.py',163),
  ('call -> NAME tuple','call',2,'p_fuc_call','Calico.py',170),
  ('calc -> if','calc',1,'p_calc','Calico.py',177),
  ('calc -> expression','calc',1,'p_calc','Calico.py',178),
  ('calc -> var_assign','calc',1,'p_calc','Calico.py',179),
  ('calc -> data','calc',1,'p_calc','Calico.py',180),
  ('calc -> empty','calc',1,'p_calc','Calico.py',181),
  ('calc -> while','calc',1,'p_calc','Calico.py',182),
  ('calc -> method','calc',1,'p_calc','Calico.py',183),
  ('calc -> output','calc',1,'p_calc','Calico.py',184),
  ('calc -> comment','calc',1,'p_calc','Calico.py',185),
  ('if -> IF RBRAC calc LBRAC RBRAC calc LBRAC elif','if',8,'p_if_else','Calico.py',192),
  ('var_assign -> NAME EQUALS expression','var_assign',3,'p_var_assign','Calico.py',199),
  ('var_assign -> NAME EQUALS data','var_assign',3,'p_var_assign','Calico.py',200),
  ('if -> IF RBRAC calc LBRAC RBRAC calc LBRAC','if',7,'p_if','Calico.py',214),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','Calico.py',220),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','Calico.py',226),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','Calico.py',227),
  ('expression -> expression PLUS expression','expression',3,'p_expression','Calico.py',228),
  ('expression -> expression MINUS expression','expression',3,'p_expression','Calico.py',229),
  ('expression -> expression MORE expression','expression',3,'p_expression','Calico.py',230),
  ('expression -> expression LESS expression','expression',3,'p_expression','Calico.py',231),
  ('expression -> expression MOEQ expression','expression',3,'p_expression','Calico.py',232),
  ('expression -> expression LEEQ expression','expression',3,'p_expression','Calico.py',233),
  ('expression -> expression DEQUALS expression','expression',3,'p_expression','Calico.py',234),
  ('expression -> INT','expression',1,'p_expression_floor','Calico.py',241),
  ('expression -> FLOAT','expression',1,'p_expression_floor','Calico.py',242),
  ('expression -> call','expression',1,'p_expression_floor','Calico.py',243),
  ('expression -> TRUE','expression',1,'p_expression_floor','Calico.py',244),
  ('expression -> FALSE','expression',1,'p_expression_floor','Calico.py',245),
  ('expression -> PAL expression PAR','expression',3,'p_expression_par','Calico.py',252),
  ('expression -> NAME','expression',1,'p_expression_var','Calico.py',259),
  ('data -> data COMMA data','data',3,'p_comma','Calico.py',266),
  ('data -> string','data',1,'p_data_floor','Calico.py',273),
  ('data -> INT','data',1,'p_data_floor','Calico.py',274),
  ('data -> FLOAT','data',1,'p_data_floor','Calico.py',275),
  ('data -> tuple','data',1,'p_data_floor','Calico.py',276),
  ('data -> expression','data',1,'p_data_floor','Calico.py',277),
  ('data -> empty','data',1,'p_data_floor','Calico.py',278),
  ('string -> STRING','string',1,'p_string','Calico.py',285),
  ('tuple -> PAL data PAR','tuple',3,'p_tuple','Calico.py',292),
  ('while -> WHILE RBRAC expression LBRAC RBRAC calc LBRAC','while',7,'p_while','Calico.py',299),
  ('output -> OUTPUT expression','output',2,'p_return','Calico.py',306),
  ('method -> METHOD NAME tuple RBRAC calc LBRAC','method',6,'p_def','Calico.py',313),
  ('elif -> ELIF RBRAC calc LBRAC RBRAC calc LBRAC','elif',7,'p_elif','Calico.py',320),
  ('elif -> ELIF RBRAC calc LBRAC RBRAC calc LBRAC elif','elif',8,'p_elif_else','Calico.py',327),
  ('empty -> none','empty',1,'p_empty_com','Calico.py',334),
  ('empty -> comment','empty',1,'p_empty_com','Calico.py',335),
  ('none -> <empty>','none',0,'p_empty','Calico.py',342),
  ('comment -> COMMENT','comment',1,'p_comment','Calico.py',349),
]
